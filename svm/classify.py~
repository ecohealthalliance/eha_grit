from sys import argv 
from svmutil import svm_problem, svm_parameter, svm_train, svm_predict

from io import read_table

max_label = 0
labels = {}
inv_labels = {}

def label2int (label):
    global max_label, labels, inv_labels
    if not labels.has_key (label):
        labels[label] = max_label
        inv_labels[max_label] = label
        max_label += 1
    return labels[label]

def int2label (label_int):
    global max_label, labels, inv_labels
    return inv_labels[label_int]

def name2label (label, pos_name):
    if label == pos_name:
        return 1
    else:
        return -1

if __name__ == '__main__':
    data = read_table (argv[1])
    #test = read_table (argv[2])

    label_name = argv[2]

    correct = 0
    wrong = 0

    print ">>> Making a classifier for %s" % (label_name,)

    for i in range (0, len (data)):
        train = []
        test = []
        for j, item in enumerate (data):
            if i != j:
                train.append (item)
            else:
                test.append (item)

        y = []
        x = []
        for item in train:
            #y.append (name2label (item['attr']['Disease'], label_name))
            y.append (label2int (item['attr']['Disease']))
            x.append (item['pos'])

        print y

        prob = svm_problem (y, x)
        param = svm_parameter ('-q -t 1')

        model = svm_train (prob, param)

        y = []
        x = []
        for item in test:
            #y.append (name2label (item['attr']['Disease'], label_name))
            y.append (label2int (item['attr']['Disease']))
            x.append (item['pos'])

        pred = svm_predict (y, x, model, '-q')

        if int (pred[0][0]) == name2label (test[0]['attr']['Disease'], label_name):
            correct += 1
        else:
            print "Misclassified: %s in row %d" % (test[0]['attr']['Disease'], i)
            wrong += 1
        
        #print test[0]['attr']['Disease'] + ' ' + str (name2label (test[0]['attr']['Disease'], label_name))  + ' ' + str (pred[0][0])

    print "Correct: %d/%d" % (correct, correct + wrong)
